#!/usr/bin/env bash

. .dzenbarrc

MONITOR=${1}
PIPE_LINE=${2}

stat_before=$(cat /proc/stat | head -n 5)
cpu_cores=$(nproc) # number of cpu cores

sleep 0.01
getCoreLoadPercent() {
	local core=${1}

	before=$(echo "${stat_before}" | grep "^cpu${core} ")
	after=$(echo "${stat_after}" | grep "^cpu${core} ")

	user0=$(echo "${before}" | awk '{ print $2 }')
	user1=$(echo "${after}" | awk '{ print $2 }')
	nice0=$(echo "${before}" | awk '{ print $3 }')
	nice1=$(echo "${after}" | awk '{ print $3 }')
	syst0=$(echo "${before}" | awk '{ print $4 }')
	syst1=$(echo "${after}" | awk '{ print $4 }')
	idle0=$(echo "${before}" | awk '{ print $5 }')
	idle1=$(echo "${after}" | awk '{ print $5 }')

	user=$(expr ${user1} - ${user0})
	nice=$(expr ${nice1} - ${nice0})
	syst=$(expr ${syst1} - ${syst0})
	idle=$(expr ${idle1} - ${idle0})

	total=$(expr ${user} + ${nice} + ${syst} + ${idle})
	used=$(expr ${user} + ${nice} + ${syst})

	echo "${used} * 100 / ${total}" | bc
}

while true; do
	stat_after=`cat /proc/stat | head -n 5`
	output=" $(iconColor 'cpu') "

	let "last = ${cpu_cores} - 1"
	for ((i=0; i < ${cpu_cores}; i++)); do
		output="${output}$(textColor "$(getCoreLoadPercent ${i})")%"

		if [[ "${i}" != "${last}" ]]; then
			output="${output} \/ "
		fi
	done

	#echo $output
	putLineToPipeFile ${MONITOR} ${PIPE_LINE} "${output}"

	stat_before=${stat_after}
	sleep ${CPU_UPDATE}
done
