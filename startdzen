#!/bin/bash

# add to .xinitrc:
# cd ~/path/to/dzen/ && ./startdzen &

# read config
. ./.dzenrc

STAT_BEFORE=`cat /proc/stat | head -n 5`

# sudo aptitude install weather-util
# create cache via cron
# */30 * * * * weather UIII -q -m > /home/qbbr/.weather/cache.dump
WEATHER_CACHE=$HOME'/.weather/cache.dump'

# number of cpu cores
CPU_CORES=`nproc`

icon() {
	echo -n " ^fg($ICON_COLOR)^i($ICON_PATH/$1.xbm)^fg() "
}

text() {
	echo -n $GRAY_COLOR$1$CLEAR_COLOR
}

sleep 0.01
getCoreLoadPercent() {
	CORE=$1

	BEFORE=`echo "$STAT_BEFORE" | grep "^cpu$CORE "`
	AFTER=`echo "$STAT_AFTER" | grep "^cpu$CORE "`

	# парсим колонки
	USER0=`echo "$BEFORE" | awk '{ print $2 }'`
	USER1=`echo "$AFTER" | awk '{ print $2 }'`
	NICE0=`echo "$BEFORE" | awk '{ print $3 }'`
	NICE1=`echo "$AFTER" | awk '{ print $3 }'`
	SYST0=`echo "$BEFORE" | awk '{ print $4 }'`
	SYST1=`echo "$AFTER" | awk '{ print $4 }'`
	IDLE0=`echo "$BEFORE" | awk '{ print $5 }'`
	IDLE1=`echo "$AFTER" | awk '{ print $5 }'`

	# разность
	USER=`expr $USER1 - $USER0`
	NICE=`expr $NICE1 - $NICE0`
	SYST=`expr $SYST1 - $SYST0`
	IDLE=`expr $IDLE1 - $IDLE0`

	# сумма разностей
	TOTAL=`expr $USER + $NICE + $SYST + $IDLE`
	USED=`expr $USER + $NICE + $SYST`

	# средняя загрузка за интервал времени в процентах
	echo "$USED * 100 / $TOTAL" | bc
}

getCpuload() {
	STAT_AFTER=`cat /proc/stat | head -n 5`

	CORE=`getCoreLoadPercent 0`
	icon 'cpu'
	echo -n $CORE%

	if [ "$CPU_CORES" -gt 1 ]; then
		CORE=`getCoreLoadPercent 1`
		text ' / '
		echo -n $CORE%
	fi

	if [ "$CPU_CORES" -gt 2 ]; then
		CORE=`getCoreLoadPercent 2`
		text ' / '
		echo -n $CORE%
	fi

	if [ "$CPU_CORES" -gt 3 ]; then
		CORE=`getCoreLoadPercent 3`
		text ' / '
		echo -n $CORE%
	fi

	STAT_BEFORE=$STAT_AFTER
}

getTemp() {
	icon 'temp'

	_CACHE=`sensors`

	COUNT=${#TEMP[@]}
	i=0
	let "COUNT = $COUNT - 1"
	for key in ${!TEMP[@]}; do
		text $key
		_TEMP=`echo "$_CACHE" | sed "${TEMP[$key]}!D" | sed -ne 's/[^:]*: \+[-+]\([0-9]\+\).*/\1/p'`
		echo -n " $_TEMP°C"
		if [ "$i" != "$COUNT" ]; then
			text ', '
		fi
		let "i = $i +1"
	done
}

getMem() {
	icon 'mem'
	# %
	MEM_USAGE_PERCENT=`free -om | awk '/Mem:/ {print int(($3 - $7 - $6) / $2  * 100)}'`
	# Mb
	MEM_USAGE_MB=`free -om | awk '/Mem:/ {print int($2 - ($3 - $7 - $6))}'`
	echo -n "$MEM_USAGE_PERCENT%"
	text ' ('
	echo -n "$MEM_USAGE_MB"M
	text ')'
}

getFs() {
	FS_DF=`df -h`

	#echo -n '^ca(1,~/sft/dwm/dzen/fs-popup.sh)'
	icon 'tall'
	#echo -n '^ca()'

	COUNT=${#FS[@]}
	let "COUNT = $COUNT - 1"
	for (( i=0; i <= $COUNT; i++ )); do
		text "`basename ${FS[$i]}`: "
		FS_DFC=`echo "$FS_DF" | grep "${FS[$i]}"`
		echo -n `echo "$FS_DFC" | awk '{ print $5 }'`
		text ' ('
		echo -n `echo "$FS_DFC" | awk '{ print $4 }'`
		text ')'

		if [ "$i" != "$COUNT" ]; then
			text ', '
		fi
	done
}

# here we remember the previous rx/tx counts
RXB=`cat /sys/class/net/$INTERFACE/statistics/rx_bytes`
TXB=`cat /sys/class/net/$INTERFACE/statistics/tx_bytes`

getNet() {
	# get new rx/tx counts
	RXBN=`cat /sys/class/net/$INTERFACE/statistics/rx_bytes`
	TXBN=`cat /sys/class/net/$INTERFACE/statistics/tx_bytes`

	# calculate the rates
	# format the values to 4 digit fields
	RXR=`echo "($RXBN - $RXB) / 1024 / $SLEEP" | bc -l | xargs printf "%.2f"`
	TXR=`echo "($TXBN - $TXB) / 1024 / $SLEEP" | bc -l | xargs printf "%.2f"`

	icon 'wired'
	echo -n "^fg(#67b15f)^i($ICON_PATH/net_down.xbm)^fg() $RXR kB/s ^fg(#785038)^i($ICON_PATH/net_up.xbm)^fg() $TXR kB/s"

	# reset old rates
	RXB=$RXBN; TXB=$TXBN
}

getWeather() {
	if [ -f "$WEATHER_CACHE" ]; then
		icon 'load'

		text 't: '
		W_TEMP=`cat $WEATHER_CACHE | awk '/Temperature/ {print $2}'`
		echo -n $W_TEMP°C

		text ', h: '
		W_HUMIDITY=`cat $WEATHER_CACHE | awk '/Humidity/ {print $3}'`
		echo -n $W_HUMIDITY
	fi
}

getMail() {
	if [ -d "$MAILDIR" ]; then
		icon 'mail'
		COUNT=`ls -1 ${MAILDIR} | wc -l`
		if [ "$COUNT" = 0 ]; then
			text $COUNT
		else
			echo -n $COUNT
		fi
	fi
}

getVolume() {
	VOLUME=`amixer get Master | tail -n1 | sed -r 's/.*\[(.*)%\].*/\1/'`
	VOLUME_ON=`amixer get $MIXER | sed -ne 's/.*\ \[\([^]]*\).*/\1/p'`

	#echo -n '^ca(1,~/scrpts/volumechanger.sh -t)'
	if [ "$VOLUME_ON" = "on" ]; then
		icon 'volume'
	else
		icon 'volume-mute'
	fi
	#echo -n '^ca()'

	echo -n "$VOLUME%"
}

getMpd() {
	#icon 'mpd'
	if [ "`mpc | head -c 6`" = "volume" ]; then
		text '[stoped]'
	else
		echo -n `mpc | head -n 1`
	fi
}

while :; do
	if $SHOW_CPU; then getCpuload; fi
	if $SHOW_TEMP; then getTemp; fi
	if $SHOW_MEM; then getMem; fi
	if $SHOW_FS; then getFs; fi
	if $SHOW_NET; then getNet; fi
	if $SHOW_WEATHER; then getWeather; fi
	if $SHOW_MAIL; then getMail; fi
	if $SHOW_VOLUME; then getVolume; fi
	if $SHOW_MPD; then getMpd; fi

	echo ''

	sleep $SLEEP
done | dzen2 -x $X -y $Y -w $WIDTH -h $HEIGHT -bg $BG -fg $FG -ta c -fn $FONT -p
